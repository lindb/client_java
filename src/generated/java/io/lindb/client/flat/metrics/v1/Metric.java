// automatically generated by the FlatBuffers compiler, do not modify

package io.lindb.client.flat.metrics.v1;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class Metric extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Metric getRootAsMetric(ByteBuffer _bb) { return getRootAsMetric(_bb, new Metric()); }
  public static Metric getRootAsMetric(ByteBuffer _bb, Metric obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Metric __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String namespace() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer namespaceAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer namespaceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public long timestamp() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public io.lindb.client.flat.metrics.v1.KeyValue keyValues(int j) { return keyValues(new io.lindb.client.flat.metrics.v1.KeyValue(), j); }
  public io.lindb.client.flat.metrics.v1.KeyValue keyValues(io.lindb.client.flat.metrics.v1.KeyValue obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int keyValuesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public io.lindb.client.flat.metrics.v1.KeyValue.Vector keyValuesVector() { return keyValuesVector(new io.lindb.client.flat.metrics.v1.KeyValue.Vector()); }
  public io.lindb.client.flat.metrics.v1.KeyValue.Vector keyValuesVector(io.lindb.client.flat.metrics.v1.KeyValue.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public long hash() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public io.lindb.client.flat.metrics.v1.SimpleField simpleFields(int j) { return simpleFields(new io.lindb.client.flat.metrics.v1.SimpleField(), j); }
  public io.lindb.client.flat.metrics.v1.SimpleField simpleFields(io.lindb.client.flat.metrics.v1.SimpleField obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int simpleFieldsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public io.lindb.client.flat.metrics.v1.SimpleField.Vector simpleFieldsVector() { return simpleFieldsVector(new io.lindb.client.flat.metrics.v1.SimpleField.Vector()); }
  public io.lindb.client.flat.metrics.v1.SimpleField.Vector simpleFieldsVector(io.lindb.client.flat.metrics.v1.SimpleField.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public io.lindb.client.flat.metrics.v1.CompoundField compoundField() { return compoundField(new io.lindb.client.flat.metrics.v1.CompoundField()); }
  public io.lindb.client.flat.metrics.v1.CompoundField compoundField(io.lindb.client.flat.metrics.v1.CompoundField obj) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createMetric(FlatBufferBuilder builder,
      int namespaceOffset,
      int nameOffset,
      long timestamp,
      int keyValuesOffset,
      long hash,
      int simpleFieldsOffset,
      int compoundFieldOffset) {
    builder.startTable(7);
    Metric.addHash(builder, hash);
    Metric.addTimestamp(builder, timestamp);
    Metric.addCompoundField(builder, compoundFieldOffset);
    Metric.addSimpleFields(builder, simpleFieldsOffset);
    Metric.addKeyValues(builder, keyValuesOffset);
    Metric.addName(builder, nameOffset);
    Metric.addNamespace(builder, namespaceOffset);
    return Metric.endMetric(builder);
  }

  public static void startMetric(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addNamespace(FlatBufferBuilder builder, int namespaceOffset) { builder.addOffset(0, namespaceOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(2, timestamp, 0L); }
  public static void addKeyValues(FlatBufferBuilder builder, int keyValuesOffset) { builder.addOffset(3, keyValuesOffset, 0); }
  public static int createKeyValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startKeyValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHash(FlatBufferBuilder builder, long hash) { builder.addLong(4, hash, 0L); }
  public static void addSimpleFields(FlatBufferBuilder builder, int simpleFieldsOffset) { builder.addOffset(5, simpleFieldsOffset, 0); }
  public static int createSimpleFieldsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSimpleFieldsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCompoundField(FlatBufferBuilder builder, int compoundFieldOffset) { builder.addOffset(6, compoundFieldOffset, 0); }
  public static int endMetric(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMetricBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedMetricBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Metric get(int j) { return get(new Metric(), j); }
    public Metric get(Metric obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

