namespace io.lindb.client.flat.metrics.v1;

enum SimpleFieldType:byte {
    UnSpecified = 0,
    Last = 1,
    DeltaSum = 2,
    Min = 3,
    Max = 4,
    First = 5,
}

table SimpleField {
    name: string;
    type: SimpleFieldType;
    value: double;
    exemplars: [Exemplar];
}

// CompoundField holds compound data used for histogram field.
table CompoundField{
    exemplars: [Exemplar];
    min: double; // lindb specific field
    max: double; // lindb specific field
    sum: double;
    count: double;
    // same as open-telemetry metrics definition
    // explicit_bounds specifies buckets with explicitly defined bounds for values.
    //
    // The boundaries for bucket at index i are:
    //
    // (-infinity, explicit_bounds[i]] for i == 0
    // (explicit_bounds[i-1], explicit_bounds[i]] for 0 < i < size(explicit_bounds)
    // (explicit_bounds[i-1], +infinity) for i == size(explicit_bounds)
    //
    // The values in the explicit_bounds array must be strictly increasing.
    //
    // Histogram buckets are inclusive of their upper boundary, except the last
    // bucket where the boundary is at infinity. This format is intentionally
    // compatible with the OpenMetrics histogram definition.
    explicitBounds: [double];
    values: [double];
}

// KeyValue is a key-value pair that is used to store tag/label attributes
table KeyValue {
    key: string;
    value: string;
}

// A representation of an exemplar, which is a sample input compound-field.
// Exemplars in LindDB wont' hold any information about the environment
// it is used to record span and trace ID for a specify series.
table Exemplar {
    // Span ID of the exemplar trace.
    spanID: [byte];
    // Trace ID of the exemplar trace.
    traceID: [byte];
    // Duration of the exemplar span.
    duration: int64;
}

// Defines a Metric which has one or more timeseries.  The following is a
// brief summary of the Metric data model.  For more details, see:
//
//   https://lindb.io/zh/docs/concept/datamodel.html
//
// Here, "Field" is the term used to refer any specific field with exemplars.
// and "Data" is the term used to refer to the specific underlying value for the field.
//
// - Metric is composed of metadata、timestamp and fields.
// - Metadata part contains a namespace, name, tags and its sorted-concat-string hash.
// - Fields is the array of the possible fields (Sum, Last, Histogram, Min, Max).
// - Fields contains exemplars, names, and the underlying value or value list
//
//     Metric
//  +---------------+
//  |namespace      |
//  |name           |
//  |tags           |
//  |tags-hash      |
//  |timestamp      |     +------------------------------------+
//  |simple-fields  |---> |Last, Sum, ...                     |
//  |compound-field |---> |Histogram                           |
//  +---------------+     +------------------------------------+
//
//  SimpleField   [One of Last, DeltaSum, Min, Max ...]
//  +-----------+
//  |name       |  // field-name
//  |type       |  // field-type
//  |exemplars  |  // exemplars of series
//  +-----------+
//  |value      |
//  +-----------+
//
//  CompoundField  [DeltaHistogram ...]
//  +-----------+
//  |exemplars  |  // exemplars of series
//  +-----+-----+-----+-----+-----+-----+
//  |min  |max  |sum  |value|value|.....|
//  +-----+-----+-----+-----+-----+-----+
table Metric {
    namespace: string;
    name:string; // metric-name
    timestamp: int64; // in milliseconds
    keyValues: [KeyValue];
    // xxhash.Sum64String(sorted tags), broker side generate before write wal
    hash: uint64 ;
    simpleFields: [SimpleField];
    compoundField: CompoundField;
}

root_type Metric;
